{"file_contents":{"app.py":{"content":"import os\nimport logging\nfrom flask import Flask, render_template, request, jsonify, send_file, flash, redirect, url_for\nfrom werkzeug.utils import secure_filename\nfrom werkzeug.middleware.proxy_fix import ProxyFix\nimport uuid\nfrom image_processor import ImageProcessor\nimport json\n\n# Configure logging\nlogging.basicConfig(level=logging.DEBUG)\n\napp = Flask(__name__)\napp.secret_key = os.environ.get(\"SESSION_SECRET\", \"dev_secret_key_change_in_production\")\napp.wsgi_app = ProxyFix(app.wsgi_app, x_proto=1, x_host=1)\n\n# Configuration\nUPLOAD_FOLDER = 'uploads'\nPROCESSED_FOLDER = 'processed'\nALLOWED_EXTENSIONS = {'png', 'jpg', 'jpeg', 'webp', 'gif'}\nMAX_FILE_SIZE = 50 * 1024 * 1024  # 50MB\n\napp.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\napp.config['PROCESSED_FOLDER'] = PROCESSED_FOLDER\napp.config['MAX_CONTENT_LENGTH'] = MAX_FILE_SIZE\n\n# Create directories if they don't exist\nos.makedirs(UPLOAD_FOLDER, exist_ok=True)\nos.makedirs(PROCESSED_FOLDER, exist_ok=True)\n\n# Initialize image processor\nprocessor = ImageProcessor()\n\ndef allowed_file(filename):\n    return '.' in filename and \\\n           filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS\n\n@app.route('/')\ndef index():\n    return render_template('index.html')\n\n@app.route('/upload', methods=['POST'])\ndef upload_file():\n    try:\n        if 'file' not in request.files:\n            return jsonify({'error': 'No file selected'}), 400\n        \n        file = request.files['file']\n        if file.filename == '':\n            return jsonify({'error': 'No file selected'}), 400\n        \n        if not allowed_file(file.filename):\n            return jsonify({'error': 'Invalid file format. Supported formats: PNG, JPG, JPEG, WEBP, GIF'}), 400\n        \n        # Generate unique filename\n        if file.filename is None:\n            return jsonify({'error': 'Invalid filename'}), 400\n        filename = secure_filename(file.filename)\n        unique_filename = f\"{uuid.uuid4()}_{filename}\"\n        filepath = os.path.join(app.config['UPLOAD_FOLDER'], unique_filename)\n        \n        file.save(filepath)\n        \n        # Get image info\n        info = processor.get_image_info(filepath)\n        \n        return jsonify({\n            'success': True,\n            'filename': unique_filename,\n            'info': info\n        })\n        \n    except Exception as e:\n        logging.error(f\"Upload error: {str(e)}\")\n        return jsonify({'error': f'Upload failed: {str(e)}'}), 500\n\n@app.route('/process', methods=['POST'])\ndef process_image():\n    try:\n        data = request.get_json()\n        filename = data.get('filename')\n        operation = data.get('operation')\n        params = data.get('params', {})\n        \n        if not filename or not operation:\n            return jsonify({'error': 'Missing filename or operation'}), 400\n        \n        input_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)\n        if not os.path.exists(input_path):\n            return jsonify({'error': 'Original file not found'}), 404\n        \n        # Generate output filename\n        output_filename = f\"processed_{uuid.uuid4()}_{filename}\"\n        output_path = os.path.join(app.config['PROCESSED_FOLDER'], output_filename)\n        \n        # Process image based on operation\n        if operation == 'upscale':\n            scale_factor = params.get('scale_factor', 2)\n            result = processor.upscale_image(input_path, output_path, scale_factor)\n        elif operation == 'enhance':\n            brightness = params.get('brightness', 1.0)\n            contrast = params.get('contrast', 1.0)\n            sharpness = params.get('sharpness', 1.0)\n            result = processor.enhance_image(input_path, output_path, brightness, contrast, sharpness)\n        elif operation == 'resize':\n            width = params.get('width')\n            height = params.get('height')\n            if not width or not height:\n                return jsonify({'error': 'Width and height required for resize'}), 400\n            result = processor.resize_image(input_path, output_path, int(width), int(height))\n        elif operation == 'remove_background':\n            result = processor.remove_background(input_path, output_path)\n        elif operation == 'remove_area':\n            mask_data = params.get('mask_data')\n            if not mask_data:\n                return jsonify({'error': 'Mask data required for area removal'}), 400\n            result = processor.remove_selected_area(input_path, output_path, mask_data)\n        else:\n            return jsonify({'error': 'Invalid operation'}), 400\n        \n        if result['success']:\n            return jsonify({\n                'success': True,\n                'processed_filename': output_filename,\n                'info': processor.get_image_info(output_path)\n            })\n        else:\n            return jsonify({'error': result['error']}), 500\n            \n    except Exception as e:\n        logging.error(f\"Processing error: {str(e)}\")\n        return jsonify({'error': f'Processing failed: {str(e)}'}), 500\n\n@app.route('/download/<filename>')\ndef download_file(filename):\n    try:\n        filepath = os.path.join(app.config['PROCESSED_FOLDER'], filename)\n        if not os.path.exists(filepath):\n            return jsonify({'error': 'File not found'}), 404\n        \n        return send_file(filepath, as_attachment=True, download_name=filename)\n        \n    except Exception as e:\n        logging.error(f\"Download error: {str(e)}\")\n        return jsonify({'error': f'Download failed: {str(e)}'}), 500\n\n@app.route('/preview/<path:filename>')\ndef preview_file(filename):\n    try:\n        # Check both upload and processed folders\n        upload_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)\n        processed_path = os.path.join(app.config['PROCESSED_FOLDER'], filename)\n        \n        if os.path.exists(upload_path):\n            return send_file(upload_path)\n        elif os.path.exists(processed_path):\n            return send_file(processed_path)\n        else:\n            return jsonify({'error': 'File not found'}), 404\n            \n    except Exception as e:\n        logging.error(f\"Preview error: {str(e)}\")\n        return jsonify({'error': f'Preview failed: {str(e)}'}), 500\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000, debug=True)\n","size_bytes":6277},"image_processor.py":{"content":"import os\nimport logging\nfrom PIL import Image, ImageEnhance, ImageFilter\nimport numpy as np\nimport json\nimport base64\nfrom io import BytesIO\n\n# Background removal availability flag\nREMBG_AVAILABLE = False\nlogging.warning(\"Background removal feature is currently disabled due to dependency compatibility issues.\")\n\nclass ImageProcessor:\n    def __init__(self):\n        self.supported_formats = {'PNG', 'JPEG', 'WEBP', 'GIF'}\n        \n    def get_image_info(self, filepath):\n        \"\"\"Get basic information about an image\"\"\"\n        try:\n            with Image.open(filepath) as img:\n                return {\n                    'width': img.width,\n                    'height': img.height,\n                    'format': img.format,\n                    'mode': img.mode,\n                    'size_mb': round(os.path.getsize(filepath) / (1024 * 1024), 2)\n                }\n        except Exception as e:\n            logging.error(f\"Error getting image info: {str(e)}\")\n            return None\n    \n    def upscale_image(self, input_path, output_path, scale_factor=2):\n        \"\"\"Upscale image using Lanczos resampling\"\"\"\n        try:\n            with Image.open(input_path) as img:\n                # Convert to RGB if necessary\n                if img.mode in ('RGBA', 'LA'):\n                    # Keep transparency for PNG\n                    pass\n                elif img.mode != 'RGB':\n                    img = img.convert('RGB')\n                \n                # Calculate new dimensions\n                new_width = int(img.width * scale_factor)\n                new_height = int(img.height * scale_factor)\n                \n                # Upscale using high-quality resampling\n                upscaled = img.resize((new_width, new_height), Image.Resampling.LANCZOS)\n                \n                # Apply additional sharpening for better quality\n                enhancer = ImageEnhance.Sharpness(upscaled)\n                upscaled = enhancer.enhance(1.2)\n                \n                # Save with appropriate format\n                if img.format == 'PNG' or img.mode in ('RGBA', 'LA'):\n                    upscaled.save(output_path, 'PNG', optimize=True)\n                else:\n                    upscaled.save(output_path, 'JPEG', quality=95, optimize=True)\n                \n                return {'success': True}\n                \n        except Exception as e:\n            logging.error(f\"Upscaling error: {str(e)}\")\n            return {'success': False, 'error': str(e)}\n    \n    def enhance_image(self, input_path, output_path, brightness=1.0, contrast=1.0, sharpness=1.0):\n        \"\"\"Enhance image with brightness, contrast, and sharpness adjustments\"\"\"\n        try:\n            with Image.open(input_path) as img:\n                # Apply brightness enhancement\n                if brightness != 1.0:\n                    enhancer = ImageEnhance.Brightness(img)\n                    img = enhancer.enhance(brightness)\n                \n                # Apply contrast enhancement\n                if contrast != 1.0:\n                    enhancer = ImageEnhance.Contrast(img)\n                    img = enhancer.enhance(contrast)\n                \n                # Apply sharpness enhancement\n                if sharpness != 1.0:\n                    enhancer = ImageEnhance.Sharpness(img)\n                    img = enhancer.enhance(sharpness)\n                \n                # Save with appropriate format\n                if img.format == 'PNG' or img.mode in ('RGBA', 'LA'):\n                    img.save(output_path, 'PNG', optimize=True)\n                else:\n                    img.save(output_path, 'JPEG', quality=95, optimize=True)\n                \n                return {'success': True}\n                \n        except Exception as e:\n            logging.error(f\"Enhancement error: {str(e)}\")\n            return {'success': False, 'error': str(e)}\n    \n    def resize_image(self, input_path, output_path, width, height):\n        \"\"\"Resize image to specific dimensions\"\"\"\n        try:\n            with Image.open(input_path) as img:\n                # Resize using high-quality resampling\n                resized = img.resize((width, height), Image.Resampling.LANCZOS)\n                \n                # Save with appropriate format\n                if img.format == 'PNG' or img.mode in ('RGBA', 'LA'):\n                    resized.save(output_path, 'PNG', optimize=True)\n                else:\n                    resized.save(output_path, 'JPEG', quality=95, optimize=True)\n                \n                return {'success': True}\n                \n        except Exception as e:\n            logging.error(f\"Resize error: {str(e)}\")\n            return {'success': False, 'error': str(e)}\n    \n    def remove_background(self, input_path, output_path):\n        \"\"\"Remove background from image using rembg\"\"\"\n        if not REMBG_AVAILABLE:\n            return {'success': False, 'error': 'Background removal feature is not available. The rembg library is not installed.'}\n        \n        try:\n            # Since rembg is not available, return error immediately\n            return {'success': False, 'error': 'Background removal feature is not available. The rembg library is not installed.'}\n            \n        except Exception as e:\n            logging.error(f\"Background removal error: {str(e)}\")\n            return {'success': False, 'error': str(e)}\n    \n    def remove_selected_area(self, input_path, output_path, mask_data):\n        \"\"\"Remove selected area from image using canvas mask data\"\"\"\n        try:\n            with Image.open(input_path) as img:\n                # Convert image to RGBA for transparency support\n                if img.mode != 'RGBA':\n                    img = img.convert('RGBA')\n                \n                # Decode mask data from base64\n                mask_image_data = base64.b64decode(mask_data.split(',')[1])\n                mask_img = Image.open(BytesIO(mask_image_data))\n                \n                # Resize mask to match image dimensions\n                mask_img = mask_img.resize((img.width, img.height), Image.Resampling.LANCZOS)\n                \n                # Convert mask to grayscale if needed\n                if mask_img.mode != 'L':\n                    mask_img = mask_img.convert('L')\n                \n                # Convert mask to numpy array\n                mask_array = np.array(mask_img)\n                img_array = np.array(img)\n                \n                # Apply mask - set alpha channel to 0 where mask is white (255)\n                mask_threshold = 128  # Threshold for mask detection\n                transparent_pixels = mask_array > mask_threshold\n                img_array[transparent_pixels, 3] = 0  # Set alpha to 0 (transparent)\n                \n                # Convert back to PIL Image\n                result_img = Image.fromarray(img_array, 'RGBA')\n                \n                # Save as PNG to preserve transparency\n                result_img.save(output_path.replace(os.path.splitext(output_path)[1], '.png'), 'PNG', optimize=True)\n                \n                return {'success': True}\n                \n        except Exception as e:\n            logging.error(f\"Area removal error: {str(e)}\")\n            return {'success': False, 'error': str(e)}\n","size_bytes":7272},"main.py":{"content":"from app import app\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000, debug=True)\n","size_bytes":99},"pyproject.toml":{"content":"[project]\nname = \"repl-nix-workspace\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nrequires-python = \">=3.11\"\ndependencies = [\n    \"email-validator>=2.3.0\",\n    \"flask>=3.1.2\",\n    \"flask-sqlalchemy>=3.1.1\",\n    \"gunicorn>=23.0.0\",\n    \"numpy>=2.3.2\",\n    \"pillow>=11.3.0\",\n    \"psycopg2-binary>=2.9.10\",\n]\n","size_bytes":322},"replit.md":{"content":"# Overview\n\nThis is an AI-powered image enhancement web application built with Flask. The application allows users to upload images and apply various enhancement operations including upscaling, background removal, resizing, and area-specific editing through an interactive canvas interface. The system provides a user-friendly web interface with drag-and-drop functionality and real-time preview capabilities.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: Vanilla JavaScript with Bootstrap for UI components\n- **Styling**: Custom CSS with Bootstrap dark theme and Font Awesome icons\n- **Interactive Features**: Drag-and-drop file upload, canvas-based selection tool for area editing\n- **Real-time Feedback**: Progress bars for upload/processing operations and live image previews\n\n## Backend Architecture\n- **Web Framework**: Flask (Python) serving as the main application server\n- **File Handling**: Secure file upload with validation and temporary storage system\n- **Image Processing**: Dedicated `ImageProcessor` class handling all image operations\n- **Session Management**: Flask sessions with configurable secret key\n- **Middleware**: ProxyFix for handling reverse proxy headers\n\n## Image Processing Pipeline\n- **Core Library**: PIL (Pillow) for basic image operations\n- **Background Removal**: rembg library for AI-powered background removal\n- **Enhancement Algorithms**: Custom implementations using PIL for upscaling, sharpening, and filtering\n- **Format Support**: PNG, JPG, JPEG, WEBP, and GIF with automatic format detection\n\n## File Management System\n- **Upload Directory**: Temporary storage for incoming files with unique naming\n- **Processing Directory**: Separate folder for processed outputs\n- **File Validation**: Extension and size limits (50MB maximum)\n- **Cleanup Strategy**: Automatic file organization with secure filename handling\n\n# External Dependencies\n\n## Python Libraries\n- **Flask**: Web application framework and routing\n- **PIL/Pillow**: Core image processing and manipulation\n- **rembg**: AI-powered background removal service\n- **NumPy**: Numerical operations for image data processing\n- **Werkzeug**: HTTP utilities and secure filename handling\n\n## Frontend Libraries\n- **Bootstrap**: UI framework with dark theme support\n- **Font Awesome**: Icon library for interface elements\n- **HTML5 Canvas API**: Interactive drawing and selection tools\n\n## System Requirements\n- **Python Runtime**: Flask application requiring Python environment\n- **File System**: Read/write access for upload and processing directories\n- **Memory**: Sufficient RAM for processing large images (up to 50MB)","size_bytes":2713},"static/css/style.css":{"content":"/* Custom styles for the image enhancer */\n\n.upload-area {\n    background: var(--bs-body-bg);\n    border-color: var(--bs-border-color) !important;\n    transition: all 0.3s ease;\n    cursor: pointer;\n}\n\n.upload-area:hover {\n    border-color: var(--bs-primary) !important;\n    background: rgba(var(--bs-primary-rgb), 0.05);\n}\n\n.upload-area.dragover {\n    border-color: var(--bs-primary) !important;\n    background: rgba(var(--bs-primary-rgb), 0.1);\n    transform: scale(1.02);\n}\n\n.image-preview-container {\n    min-height: 300px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    background: rgba(var(--bs-secondary-rgb), 0.1);\n    border-radius: 0.375rem;\n    padding: 1rem;\n}\n\n.image-preview-container img {\n    max-width: 100%;\n    max-height: 400px;\n    object-fit: contain;\n    border-radius: 0.375rem;\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n}\n\n/* Range sliders styling */\n.form-range {\n    margin-bottom: 0.5rem;\n}\n\n/* Canvas styling */\n#selection-canvas {\n    cursor: crosshair;\n    max-width: 100%;\n    height: auto;\n    display: block;\n    margin: 0 auto;\n}\n\n#selection-canvas.erase-mode {\n    cursor: grab;\n}\n\n/* Processing status overlay */\n#processing-status {\n    position: fixed;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    z-index: 1050;\n    min-width: 300px;\n}\n\n/* Tab content spacing */\n.tab-content {\n    padding-top: 1rem;\n}\n\n/* Tool buttons */\n.btn-group .btn {\n    border-radius: 0.375rem;\n}\n\n.btn-group .btn:not(:last-child) {\n    margin-right: 0.5rem;\n}\n\n/* Card hover effects */\n.card {\n    transition: transform 0.2s ease, box-shadow 0.2s ease;\n}\n\n.card:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);\n}\n\n/* Info text styling */\n.text-muted small {\n    font-size: 0.875rem;\n}\n\n/* Progress bar animations */\n.progress-bar-animated {\n    animation: progress-bar-stripes 1s linear infinite;\n}\n\n/* Responsive adjustments */\n@media (max-width: 768px) {\n    .display-4 {\n        font-size: 2.5rem;\n    }\n    \n    .image-preview-container {\n        min-height: 200px;\n    }\n    \n    .image-preview-container img {\n        max-height: 250px;\n    }\n    \n    #selection-canvas {\n        max-width: 100%;\n    }\n}\n\n/* Custom scrollbar for better dark theme compatibility */\n::-webkit-scrollbar {\n    width: 8px;\n}\n\n::-webkit-scrollbar-track {\n    background: var(--bs-body-bg);\n}\n\n::-webkit-scrollbar-thumb {\n    background: var(--bs-secondary);\n    border-radius: 4px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n    background: var(--bs-secondary-color);\n}\n\n/* Loading animation for buttons */\n.btn.loading {\n    pointer-events: none;\n    opacity: 0.7;\n}\n\n.btn.loading::after {\n    content: \"\";\n    display: inline-block;\n    width: 1rem;\n    height: 1rem;\n    margin-left: 0.5rem;\n    border: 2px solid currentColor;\n    border-radius: 50%;\n    border-right-color: transparent;\n    animation: spin 0.75s linear infinite;\n}\n\n@keyframes spin {\n    to {\n        transform: rotate(360deg);\n    }\n}\n","size_bytes":3003},"static/js/app.js":{"content":"// Global variables\nlet currentFilename = null;\nlet currentImageInfo = null;\nlet processedFilename = null;\nlet isDrawing = false;\nlet drawMode = true; // true for draw, false for erase\nlet canvas = null;\nlet ctx = null;\nlet originalImageData = null;\n\n// Initialize the application\ndocument.addEventListener('DOMContentLoaded', function() {\n    initializeEventListeners();\n    initializeSliders();\n});\n\nfunction initializeEventListeners() {\n    // File upload\n    const fileInput = document.getElementById('file-input');\n    const uploadArea = document.getElementById('upload-area');\n    \n    fileInput.addEventListener('change', handleFileSelect);\n    uploadArea.addEventListener('click', () => fileInput.click());\n    \n    // Drag and drop\n    uploadArea.addEventListener('dragover', handleDragOver);\n    uploadArea.addEventListener('dragleave', handleDragLeave);\n    uploadArea.addEventListener('drop', handleFileDrop);\n    \n    // Processing buttons\n    document.getElementById('upscale-btn').addEventListener('click', () => processImage('upscale'));\n    document.getElementById('enhance-btn').addEventListener('click', () => processImage('enhance'));\n    document.getElementById('resize-btn').addEventListener('click', () => processImage('resize'));\n    document.getElementById('remove-bg-btn').addEventListener('click', () => processImage('remove_background'));\n    document.getElementById('apply-selection-btn').addEventListener('click', () => processImage('remove_area'));\n    \n    // Reset button\n    document.getElementById('reset-enhance-btn').addEventListener('click', resetEnhanceSliders);\n    \n    // Canvas controls\n    document.getElementById('draw-mode-btn').addEventListener('click', () => setCanvasMode(true));\n    document.getElementById('erase-mode-btn').addEventListener('click', () => setCanvasMode(false));\n    document.getElementById('clear-selection-btn').addEventListener('click', clearCanvas);\n    \n    // Download button\n    document.getElementById('download-btn').addEventListener('click', downloadProcessedImage);\n    \n    // Aspect ratio maintenance\n    document.getElementById('new-width').addEventListener('input', maintainAspectRatio);\n    document.getElementById('new-height').addEventListener('input', maintainAspectRatio);\n}\n\nfunction initializeSliders() {\n    // Enhancement sliders\n    const brightnessSlider = document.getElementById('brightness-slider');\n    const contrastSlider = document.getElementById('contrast-slider');\n    const sharpnessSlider = document.getElementById('sharpness-slider');\n    const brushSizeSlider = document.getElementById('brush-size');\n    \n    brightnessSlider.addEventListener('input', (e) => {\n        document.getElementById('brightness-value').textContent = e.target.value;\n    });\n    \n    contrastSlider.addEventListener('input', (e) => {\n        document.getElementById('contrast-value').textContent = e.target.value;\n    });\n    \n    sharpnessSlider.addEventListener('input', (e) => {\n        document.getElementById('sharpness-value').textContent = e.target.value;\n    });\n    \n    brushSizeSlider.addEventListener('input', (e) => {\n        document.getElementById('brush-size-value').textContent = e.target.value + 'px';\n    });\n}\n\n// File handling functions\nfunction handleFileSelect(event) {\n    const file = event.target.files[0];\n    if (file) {\n        uploadFile(file);\n    }\n}\n\nfunction handleDragOver(event) {\n    event.preventDefault();\n    event.currentTarget.classList.add('dragover');\n}\n\nfunction handleDragLeave(event) {\n    event.currentTarget.classList.remove('dragover');\n}\n\nfunction handleFileDrop(event) {\n    event.preventDefault();\n    event.currentTarget.classList.remove('dragover');\n    \n    const files = event.dataTransfer.files;\n    if (files.length > 0) {\n        uploadFile(files[0]);\n    }\n}\n\nfunction uploadFile(file) {\n    // Validate file type\n    const allowedTypes = ['image/png', 'image/jpeg', 'image/jpg', 'image/webp', 'image/gif'];\n    if (!allowedTypes.includes(file.type)) {\n        showAlert('Invalid file type. Please upload PNG, JPG, JPEG, WEBP, or GIF files.', 'danger');\n        return;\n    }\n    \n    // Validate file size (50MB)\n    if (file.size > 50 * 1024 * 1024) {\n        showAlert('File size too large. Please upload files smaller than 50MB.', 'danger');\n        return;\n    }\n    \n    const formData = new FormData();\n    formData.append('file', file);\n    \n    // Show upload progress\n    showUploadProgress();\n    \n    fetch('/upload', {\n        method: 'POST',\n        body: formData\n    })\n    .then(response => response.json())\n    .then(data => {\n        hideUploadProgress();\n        \n        if (data.success) {\n            currentFilename = data.filename;\n            currentImageInfo = data.info;\n            displayOriginalImage();\n            showImageWorkspace();\n        } else {\n            showAlert(data.error || 'Upload failed', 'danger');\n        }\n    })\n    .catch(error => {\n        hideUploadProgress();\n        console.error('Upload error:', error);\n        showAlert('Upload failed. Please try again.', 'danger');\n    });\n}\n\nfunction displayOriginalImage() {\n    const img = document.getElementById('original-image');\n    const info = document.getElementById('original-info');\n    \n    img.src = `/preview/${currentFilename}`;\n    img.onload = function() {\n        // Update image info\n        info.innerHTML = `\n            <small class=\"text-muted\">\n                ${currentImageInfo.width} × ${currentImageInfo.height} pixels | \n                ${currentImageInfo.format} | \n                ${currentImageInfo.size_mb} MB\n            </small>\n        `;\n        \n        // Initialize canvas for selection tool\n        initializeSelectionCanvas();\n        \n        // Set default resize values\n        document.getElementById('new-width').value = currentImageInfo.width;\n        document.getElementById('new-height').value = currentImageInfo.height;\n    };\n}\n\nfunction initializeSelectionCanvas() {\n    canvas = document.getElementById('selection-canvas');\n    ctx = canvas.getContext('2d');\n    \n    const img = document.getElementById('original-image');\n    \n    // Set canvas size to match displayed image\n    const rect = img.getBoundingClientRect();\n    canvas.width = img.naturalWidth;\n    canvas.height = img.naturalHeight;\n    canvas.style.width = Math.min(500, rect.width) + 'px';\n    canvas.style.height = (canvas.height * Math.min(500, rect.width) / canvas.width) + 'px';\n    \n    // Store original image data\n    const tempCanvas = document.createElement('canvas');\n    const tempCtx = tempCanvas.getContext('2d');\n    tempCanvas.width = canvas.width;\n    tempCanvas.height = canvas.height;\n    tempCtx.drawImage(img, 0, 0);\n    originalImageData = tempCtx.getImageData(0, 0, canvas.width, canvas.height);\n    \n    // Draw original image on canvas\n    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n    \n    // Add drawing event listeners\n    canvas.addEventListener('mousedown', startDrawing);\n    canvas.addEventListener('mousemove', draw);\n    canvas.addEventListener('mouseup', stopDrawing);\n    canvas.addEventListener('mouseout', stopDrawing);\n    \n    // Touch events for mobile\n    canvas.addEventListener('touchstart', handleTouch);\n    canvas.addEventListener('touchmove', handleTouch);\n    canvas.addEventListener('touchend', stopDrawing);\n}\n\n// Canvas drawing functions\nfunction startDrawing(event) {\n    isDrawing = true;\n    draw(event);\n}\n\nfunction draw(event) {\n    if (!isDrawing) return;\n    \n    const rect = canvas.getBoundingClientRect();\n    const scaleX = canvas.width / rect.width;\n    const scaleY = canvas.height / rect.height;\n    \n    const x = (event.clientX - rect.left) * scaleX;\n    const y = (event.clientY - rect.top) * scaleY;\n    \n    const brushSize = parseInt(document.getElementById('brush-size').value);\n    \n    ctx.globalCompositeOperation = drawMode ? 'source-over' : 'destination-out';\n    ctx.beginPath();\n    ctx.arc(x, y, brushSize / 2, 0, 2 * Math.PI);\n    ctx.fillStyle = drawMode ? 'rgba(255, 0, 0, 0.5)' : 'transparent';\n    ctx.fill();\n}\n\nfunction stopDrawing() {\n    isDrawing = false;\n}\n\nfunction handleTouch(event) {\n    event.preventDefault();\n    const touch = event.touches[0];\n    const mouseEvent = new MouseEvent(event.type === 'touchstart' ? 'mousedown' : \n                                     event.type === 'touchmove' ? 'mousemove' : 'mouseup', {\n        clientX: touch.clientX,\n        clientY: touch.clientY\n    });\n    canvas.dispatchEvent(mouseEvent);\n}\n\nfunction setCanvasMode(isDraw) {\n    drawMode = isDraw;\n    document.getElementById('draw-mode-btn').classList.toggle('active', isDraw);\n    document.getElementById('erase-mode-btn').classList.toggle('active', !isDraw);\n    canvas.className = isDraw ? '' : 'erase-mode';\n}\n\nfunction clearCanvas() {\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    ctx.putImageData(originalImageData, 0, 0);\n}\n\n// Image processing functions\nfunction processImage(operation) {\n    if (!currentFilename) {\n        showAlert('Please upload an image first', 'warning');\n        return;\n    }\n    \n    let params = {};\n    \n    // Gather parameters based on operation\n    switch (operation) {\n        case 'upscale':\n            params.scale_factor = parseInt(document.getElementById('scale-factor').value);\n            break;\n        case 'enhance':\n            params.brightness = parseFloat(document.getElementById('brightness-slider').value);\n            params.contrast = parseFloat(document.getElementById('contrast-slider').value);\n            params.sharpness = parseFloat(document.getElementById('sharpness-slider').value);\n            break;\n        case 'resize':\n            params.width = parseInt(document.getElementById('new-width').value);\n            params.height = parseInt(document.getElementById('new-height').value);\n            \n            if (!params.width || !params.height || params.width < 1 || params.height < 1) {\n                showAlert('Please enter valid width and height values', 'warning');\n                return;\n            }\n            break;\n        case 'remove_area':\n            if (!canvas) {\n                showAlert('Please draw on the image to select areas to remove', 'warning');\n                return;\n            }\n            params.mask_data = canvas.toDataURL();\n            break;\n    }\n    \n    showProcessingStatus();\n    \n    fetch('/process', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n            filename: currentFilename,\n            operation: operation,\n            params: params\n        })\n    })\n    .then(response => response.json())\n    .then(data => {\n        hideProcessingStatus();\n        \n        if (data.success) {\n            processedFilename = data.processed_filename;\n            displayProcessedImage(data.info);\n        } else {\n            showAlert(data.error || 'Processing failed', 'danger');\n        }\n    })\n    .catch(error => {\n        hideProcessingStatus();\n        console.error('Processing error:', error);\n        showAlert('Processing failed. Please try again.', 'danger');\n    });\n}\n\nfunction displayProcessedImage(info) {\n    const container = document.getElementById('processed-preview');\n    const infoDiv = document.getElementById('processed-info');\n    const downloadSection = document.getElementById('download-section');\n    \n    container.innerHTML = `<img src=\"/preview/${processedFilename}\" class=\"img-fluid rounded\" style=\"max-height: 400px;\">`;\n    \n    infoDiv.innerHTML = `\n        <small class=\"text-muted\">\n            ${info.width} × ${info.height} pixels | \n            ${info.format} | \n            ${info.size_mb} MB\n        </small>\n    `;\n    \n    downloadSection.classList.remove('d-none');\n}\n\nfunction downloadProcessedImage() {\n    if (processedFilename) {\n        window.open(`/download/${processedFilename}`, '_blank');\n    }\n}\n\n// Utility functions\nfunction maintainAspectRatio(event) {\n    if (!document.getElementById('maintain-aspect').checked || !currentImageInfo) return;\n    \n    const aspectRatio = currentImageInfo.width / currentImageInfo.height;\n    const widthInput = document.getElementById('new-width');\n    const heightInput = document.getElementById('new-height');\n    \n    if (event.target.id === 'new-width') {\n        heightInput.value = Math.round(widthInput.value / aspectRatio);\n    } else {\n        widthInput.value = Math.round(heightInput.value * aspectRatio);\n    }\n}\n\nfunction resetEnhanceSliders() {\n    document.getElementById('brightness-slider').value = 1;\n    document.getElementById('contrast-slider').value = 1;\n    document.getElementById('sharpness-slider').value = 1;\n    document.getElementById('brightness-value').textContent = '1.0';\n    document.getElementById('contrast-value').textContent = '1.0';\n    document.getElementById('sharpness-value').textContent = '1.0';\n}\n\nfunction showImageWorkspace() {\n    document.getElementById('image-workspace').classList.remove('d-none');\n}\n\nfunction showUploadProgress() {\n    document.getElementById('upload-progress').classList.remove('d-none');\n    document.querySelector('.progress-bar').style.width = '100%';\n}\n\nfunction hideUploadProgress() {\n    document.getElementById('upload-progress').classList.add('d-none');\n    document.querySelector('.progress-bar').style.width = '0%';\n}\n\nfunction showProcessingStatus() {\n    document.getElementById('processing-status').classList.remove('d-none');\n}\n\nfunction hideProcessingStatus() {\n    document.getElementById('processing-status').classList.add('d-none');\n}\n\nfunction showAlert(message, type = 'info') {\n    // Create alert element\n    const alertDiv = document.createElement('div');\n    alertDiv.className = `alert alert-${type} alert-dismissible fade show position-fixed`;\n    alertDiv.style.cssText = 'top: 20px; right: 20px; z-index: 1055; min-width: 300px;';\n    alertDiv.innerHTML = `\n        ${message}\n        <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\"></button>\n    `;\n    \n    document.body.appendChild(alertDiv);\n    \n    // Auto-dismiss after 5 seconds\n    setTimeout(() => {\n        if (alertDiv.parentNode) {\n            alertDiv.remove();\n        }\n    }, 5000);\n}\n","size_bytes":14253}},"version":1}